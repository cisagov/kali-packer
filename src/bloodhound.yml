---
- name: Install and configure Neo4j
  block:
    # The version of Neo4j available by default in Kali does not
    # include the SystemD service file, so we need to install the
    # package from a different repo.
    - name: Configure apt to use official Neo4j apt repo
      block:
        - name: Add key for official Neo4j apt repo
          ansible.builtin.apt_key:
            url: https://debian.neo4j.com/neotechnology.gpg.key
        - name: Add official apt repo for Neo4j
          ansible.builtin.apt_repository:
            repo: deb https://debian.neo4j.com stable 4.3

    - name: Install Neo4j
      ansible.builtin.package:
        name:
          - neo4j

    # BloodHound will not work unless you change the Neo4j password
    # from the default value.
    #
    # Note that the version of the official Neo4j package includes an
    # epoch prefix in the version, followed by a colon character.
    # This can be seen here:
    # https://debian.neo4j.com/
    #
    # If we replace the colon by an exclamation point, then the
    # resulting version is consistent with the pep440 version_type
    # parameter, as described in these links:
    # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tests.html#comparing-versions
    # https://peps.python.org/pep-0440/
    - name: Set Neo4j password
      block:
        - name: Gather the package facts
          ansible.builtin.package_facts:

        - name: Get version of the installed Neo4j package
          ansible.builtin.set_fact:
            installed_neo4j_version: >-
              "{{ ansible_facts.packages['neo4j'] |
              map(attribute='version') | first |
              replace(':', '!') | replace('"', '') | trim }}"

        - name: Set neo4j password on version < 5
          ansible.builtin.command:
            cmd: >
              /usr/bin/neo4j-admin
              set-initial-password {{ password }}
          changed_when: false
          no_log: true
          when:
            - installed_neo4j_version is version("1!5.0", "<", version_type="pep440")

        - name: Set neo4j password on version >= 5
          ansible.builtin.command:
            cmd: >
              /usr/bin/neo4j-admin dbms
              set-initial-password {{ password }}
          changed_when: false
          no_log: true
          when:
            - installed_neo4j_version is version("1!5.0", ">=", version_type="pep440")

    - name: Systemd daemon-reload
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Start Neo4j service at boot
      ansible.builtin.service:
        enabled: yes
        name: neo4j

- name: Install BloodHound
  block:
    - name: Install npm
      ansible.builtin.package:
        name:
          - npm
    - name: Install Electron Packager
      community.general.npm:
        global: yes
        name: electron-packager
    - name: Download BloodHound tool from GitHub
      ansible.builtin.import_role:
        name: assessment_tool
      vars:
        archive_src: https://github.com/BloodHoundAD/BloodHound/tarball/master
        install_dir: /tools/BloodHound
        unarchive_extra_opts:
          - --strip-components=1
    # Kali uses a very new version of npm, which now generates errors
    # as described here:
    # https://stackoverflow.com/questions/66239691/what-does-npm-install-legacy-peer-deps-do-exactly-when-is-it-recommended-wh
    # The solution is to run npm with the --legacy-peer-deps flag,
    # which forces npm to handle peer dependencies like it used to do.
    # Unfortunately I can't do that with the community.general.npm
    # module, so I have to use ansible.builtin.command.

    # - name: Install BloodHound dependencies
    #   community.general.npm:
    #     ci: yes
    #     path: /tools/BloodHound
    #     production: yes
    - name: Install BloodHound dependencies
      ansible.builtin.command:
        chdir: /tools/BloodHound
        cmd: npm ci --legacy-peer-deps
    - name: Build BloodHound
      ansible.builtin.command:
        chdir: /tools/BloodHound
        cmd: npm run build:linux
      environment:
        # This is necessary to avoid errors caused by the fact that
        # the BloodHound build process uses some now-disallowed (as of
        # OpenSSL 3.0) encryption functions.  This is again because
        # Kali is running a very new version of Node.
        NODE_OPTIONS: --openssl-legacy-provider

- name: Install Python ingestor for BloodHound
  ansible.builtin.import_role:
    name: assessment_tool
  vars:
    archive_src: https://github.com/fox-it/BloodHound.py/tarball/master
    install_dir: /tools/BloodHound.py
    pip_packages:
      - .
    unarchive_extra_opts:
      - --strip-components=1
